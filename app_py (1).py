# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ADoPCrMm3DGSIND643phGThq90ukZwzj
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
from sklearn import datasets

st.set_page_config(page_title="dashboard")
st.title ("Tes")

# Load saved model with joblib
model = joblib.load('gaussian_nb.pkl')

# Load iris dataset
iris = datasets.load_iris()
iris_df = pd.DataFrame(
    iris.data,
    columns=iris.feature_names
)
iris_df['target'] = iris.target
iris_df['target_name'] = iris_df['target'].apply(lambda x: iris.target_names[x])

# Streamlit setup
st.set_page_config(page_title="Iris Classifier App", layout="wide")

# Sidebar for navigation
pages = ['Data Description', 'Prediction', 'About']
st.sidebar.title("Navigation")
selection = st.sidebar.radio("Go to", pages)

# PAGE 1: Data Description
if selection == 'Data Description':
    st.title("üå∏ Iris Dataset Description")
    st.write("The Iris dataset is a classic dataset used for classification tasks. "
             "It includes measurements for 150 iris flowers, from three species: "
             "*setosa*, *versicolor*, and *virginica*.")

    st.subheader("Sample Data")
    st.dataframe(iris_df.head())

    st.subheader("Dataset Summary")
    st.write(iris_df.describe())

    st.subheader("Class Distribution")
    st.bar_chart(iris_df['target_name'].value_counts())

# PAGE 2: Prediction
elif selection == 'Prediction':
    st.title("üîÆ Iris Flower Prediction")
    st.write("Input the flower's measurements below:")

    # Input sliders
    sepal_length = st.slider('Sepal Length (cm)', float(iris_df['sepal length (cm)'].min()), float(iris_df['sepal length (cm)'].max()), float(iris_df['sepal length (cm)'].mean()))
    sepal_width = st.slider('Sepal Width (cm)', float(iris_df['sepal width (cm)'].min()), float(iris_df['sepal width (cm)'].max()), float(iris_df['sepal width (cm)'].mean()))
    petal_length = st.slider('Petal Length (cm)', float(iris_df['petal length (cm)'].min()), float(iris_df['petal length (cm)'].max()), float(iris_df['petal length (cm)'].mean()))
    petal_width = st.slider('Petal Width (cm)', float(iris_df['petal width (cm)'].min()), float(iris_df['petal width (cm)'].max()), float(iris_df['petal width (cm)'].mean()))

    input_data = np.array([[sepal_length, sepal_width, petal_length, petal_width]])

    if st.button('Predict'):
        prediction = model.predict(input_data)
        predicted_class = iris.target_names[prediction][0]
        st.success(f"The predicted Iris species is: **{predicted_class.capitalize()}**")

# PAGE 3: About
elif selection == 'About':
    st.title("üë©‚Äçüíª About This App")
    st.write("""
    This Streamlit app was created to demonstrate the deployment of a Naive Bayes classifier
    trained on the Iris dataset.

    **Pages:**
    - Data Description ‚Üí View dataset summary.
    - Prediction ‚Üí Classify an iris flower.
    - About ‚Üí You're here!

    **Credits:**
    - Developer: ChatGPT + You
    - Model: Naive Bayes (saved with joblib)
    - Dataset: Scikit-learn's Iris dataset

    **Fun Fact:** üå∑ The iris flower is named after the Greek goddess Iris, who was the messenger of the gods and personified the rainbow.
    """)

    st.image("https://upload.wikimedia.org/wikipedia/commons/4/41/Iris_versicolor_3.jpg", caption="Iris Flower", use_column_width=True)
